

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
error_log  /usr/local/var/log/nginx/info.log  info;
error_log  /usr/local/var/log/nginx/error.log  error;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    lua_code_cache on;
    include       mime.types;
    default_type  application/octet-stream;

    # set search paths for pure Lua external libraries (';;' is the default path):
 	lua_package_path '/foo/bar/?.lua;/blah/?.lua;;';

 	# set search paths for Lua external libraries written in C (can also use ';;'):
 	lua_package_cpath '/bar/baz/?.so;/blah/blah/?.so;;';

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       *:8000;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
     		#redis2_pass 127.0.0.1:6379;
     		#redis2_raw_queries 1 "set m a";
     		#redis2_query set hello world;
     		#redis2_query get hello;
         	# MIME type determined by default_type:
         	default_type 'text/plain';

            access_by_lua_block {
            	-- SET UP
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                -- or connect to a unix domain socket file listened by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                -- VARIABLES
                local counter, err = red:incr("rate_limiter_counter")
                local client_id = ngx.req.get_headers()["X-name"];
                if not client_id then
                  client_id = ngx.var.remote_addr
                end
                ngx.update_time()
                local timestamp = ngx.now()
                local reject_win_start = timestamp-30*60
                local reject_limit = 5*30*60;
                local reject_win_start_s = timestamp-1*60
                local reject_limit_s = 10*1*60;
                local slow_down_win_start = timestamp-5
                local slow_down_limit = 10*5;
                local slow_down_seconds = 0.2;

                -- INVALIDATE TOKENS
                ok, err = red:zremrangebyscore(client_id, "-inf", reject_win_start)
                if not ok then
                    ngx.say("failed to remove: ", err)
                    return
                end

                -- SHORT REJECT RATE LIMITER
                --local tokens, err = red:zcount(client_id, reject_win_start_s, "+inf")
                --if not tokens then
                --    ngx.say("failed to get count: ", err)
                --    return
                --end

                --if tokens > reject_limit_s then
                --  	ngx.status = ngx.HTTP_TOO_MANY_REQUESTS
                --  	ngx.say("Too many requests ", tokens)
                --  	return ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
                --end

                -- LEAKY BUCKET WITH BUFFER
                local long_time, err = red:zcount(client_id, timestamp-1*60, "+inf")
                local rate_long_time = long_time / (1.0*60.0)

                if (rate_long_time > 6.0) then
                	local real_time_tokens, err = red:zcount(client_id, timestamp-1.0, "+inf")
                	if (real_time_tokens > 6.0) then
                	    ngx.status = ngx.HTTP_TOO_MANY_REQUESTS
                    	ngx.say("Too many requests ", tokens)
                    	return ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
                    end
                 end

                --if tokens > reject_limit_s then
                --  	ngx.status = ngx.HTTP_TOO_MANY_REQUESTS
                --  	ngx.say("Too many requests ", tokens)
                --  	return ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
                --end

                -- REJECT RATE LIMITER
                local tokens, err = red:zcount(client_id, reject_win_start, "+inf")
                if not tokens then
                    ngx.say("failed to get count: ", err)
                    return
                end

                if tokens > reject_limit then
                  	ngx.status = ngx.HTTP_TOO_MANY_REQUESTS
                  	ngx.say("Too many requests ", tokens)
                  	return ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
                end

                -- SLOW DOWN RATE LIMITER
                local tokens, err = red:zcount(client_id, slow_down_win_start, "+inf")
                if not tokens then
                    ngx.say("failed to get count: ", err)
                    return
                end

                if tokens > slow_down_limit then
					ngx.sleep(slow_down_seconds)
                end

                ok, err = red:zadd(client_id, timestamp, timestamp .. "_" .. counter)
                if not ok then
                    ngx.say("failed to add: ", err)
                    return
                end

                --ngx.say("Client ID: ", client_id )
                --ngx.say("Tokens used: ", used_tokens_long)
             }

             proxy_pass http://localhost:9000;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
